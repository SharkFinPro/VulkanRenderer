name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 4 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      # 4. <macOS, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install dependencies (Ubuntu)
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        sudo apt-get update
        sudo apt-get install -y libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libxext-dev libwayland-dev libxkbcommon-dev libgl1-mesa-dev

    - name: Prepare Vulkan SDK
      uses: humbletim/install-vulkan-sdk@main
      with:
        version: 1.3.250.1
        cache: true

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Prepare Binaries
      shell: bash
      run: |
        # Function to copy file if not exists
        copy_if_not_exists() {
          if [ ! -f "$2" ]; then
            cp "$1" "$2"
          fi
        }

        # Linux
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          # Copy system libraries only if they don't exist
          copy_if_not_exists /usr/lib/x86_64-linux-gnu/libstdc++.so.6 ${{ steps.strings.outputs.build-output-dir }}/bin/libstdc++.so.6
          copy_if_not_exists /lib/x86_64-linux-gnu/libc.so.6 ${{ steps.strings.outputs.build-output-dir }}/bin/libc.so.6
          copy_if_not_exists /lib/x86_64-linux-gnu/libm.so.6 ${{ steps.strings.outputs.build-output-dir }}/bin/libm.so.6

          # Find and copy additional libraries not already in the bin directory
          ldd ${{ steps.strings.outputs.build-output-dir }}/bin/cube | grep "=> /" | awk '{print $3}' | while read -r lib; do
            libname=$(basename "$lib")
            copy_if_not_exists "$lib" "${{ steps.strings.outputs.build-output-dir }}/bin/$libname"
          done

        elif [ "${{ matrix.os }}" == "windows-latest" ]; then
          # Copy necessary Windows runtime libraries
          cp "C:/Windows/System32/msvcp140.dll" ${{ steps.strings.outputs.build-output-dir }}/bin/
          cp "C:/Windows/System32/vcruntime140.dll" ${{ steps.strings.outputs.build-output-dir }}/bin/

        elif [ "${{ matrix.os }}" == "macos-latest" ]; then
          # If you need to copy specific macOS system libraries
          # This might require additional investigation
          echo "Preparing macOS libraries"

        fi

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-${{ matrix.c_compiler }}-binaries
        path: |
          ${{ steps.strings.outputs.build-output-dir }}/bin
        retention-days: 5
