#version 450

struct Particle {
  vec3 position;
  float ttl;
  vec3 velocity;
  vec4 color;
  vec3 initialPosition;
  vec3 initialVelocity;
};

layout (binding = 0) uniform ParameterUBO {
  float deltaTime;
} ubo;

layout(std140, binding = 1) readonly buffer ParticleSSBOIn {
  Particle particlesIn[ ];
};

layout(std140, binding = 2) buffer ParticleSSBOOut {
  Particle particlesOut[ ];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main()
{
  uint index = gl_GlobalInvocationID.x;

  Particle particle = particlesIn[index];

  particlesOut[index].ttl = particle.ttl += ubo.deltaTime;

  if (particle.ttl > 5)
  {
    particlesOut[index].position = particle.initialPosition;
    particlesOut[index].velocity = particle.initialVelocity;
    particlesOut[index].ttl = 0;
  }
  else if (particle.ttl > 0)
  {
    particlesOut[index].position = particle.position + particle.velocity * ubo.deltaTime;
    particlesOut[index].velocity = particle.velocity;
    particlesOut[index].color = vec4(particle.color.xyz, (5.0 - particle.ttl) / 5.0);
  }
  else
  {
    particlesOut[index].color = vec4(particle.color.xyz, 0);
  }

//  // Flip movement at window border
//  if ((particlesOut[index].position.x <= -1.0) || (particlesOut[index].position.x >= 1.0)) {
//    particlesOut[index].velocity.x = -particlesOut[index].velocity.x;
//  }
//  if ((particlesOut[index].position.y <= -1.0) || (particlesOut[index].position.y >= 1.0)) {
//    particlesOut[index].velocity.y = -particlesOut[index].velocity.y;
//  }
}