#version 450

struct Particle {
  vec4 positionTtl;
  vec4 velocityColor;
};

layout(binding = 0) uniform ParameterUBO {
  float deltaTime;
} ubo;

layout(set = 0, binding = 4) uniform Smoke {
  vec3 systemPosition;
  float spreadFactor;
  float maxSpreadDistance;
  float windStrength;
} smoke;

layout(std140, binding = 1) readonly buffer ParticleSSBOIn {
  Particle particlesIn[ ];
};

layout(std140, binding = 2) buffer ParticleSSBOOut {
  Particle particlesOut[ ];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

const float TTL = 8.0;
const float PI = 3.14159265359;
const float TWO_PI = 6.28318530718;

vec3 applyWind(vec3 position, float ttl);

vec3 generateSpreadDirection(vec3 position, float ttl);

vec3 calcSpreadForce(vec3 position, float ttl);

float rand(float seed);

float randRange(float seed, float minVal, float maxVal);

vec3 regenerateInitialPosition(float seed);

vec3 regenerateInitialVelocity(float seed);

void main()
{
  uint index = gl_GlobalInvocationID.x;

  Particle particle = particlesIn[index];

  vec3 position = particle.positionTtl.xyz;
  vec3 velocity = particle.velocityColor.xyz;
  float ttl = particle.positionTtl.w + ubo.deltaTime;

  if (ttl < 0)
  {
    particlesOut[index].positionTtl.w = ttl;
    return;
  }

  if (ttl > TTL)
  {
    particlesOut[index].positionTtl.w = TTL - ttl;
    return;
  }

  if (ttl - ubo.deltaTime < 0)
  {
    float seed = (position.x + position.y + position.z) / 3.0;

    velocity = regenerateInitialVelocity(seed);

    position = regenerateInitialPosition(seed);
  }

  vec3 wind = applyWind(position, ttl);

  vec3 spreadForce = calcSpreadForce(position, ttl);

  velocity += (wind + spreadForce) * ubo.deltaTime;

  position += velocity * ubo.deltaTime;

  particlesOut[index].positionTtl = vec4(position, ttl);

  particlesOut[index].velocityColor.xyz = velocity;
}

vec3 applyWind(vec3 position, float ttl)
{
  vec3 windDir = vec3(sin(ttl * 0.1), 0.0, cos(ttl * 0.3));

  float turbulence = sin(position.y * 0.5 + ttl) * 0.15 +
  cos(position.x * 0.3 + ttl * 0.7) * 0.1;

  return windDir * smoke.windStrength + vec3(turbulence, 0.0, turbulence);
}

vec3 generateSpreadDirection(vec3 position, float ttl)
{
  vec3 direction = normalize(position - vec3(0.0));

  if(length(direction) < 0.01)
  {
    direction = normalize(vec3(sin(ttl * PI * 7.0), cos(ttl * PI * 11.0), sin(ttl * PI * 13.0)));
  }

  return direction;
}

vec3 calcSpreadForce(vec3 position, float ttl)
{
  float normalizedTime = ttl / TTL; // Value from 0 to 1
  float spreadStrength = min(smoke.spreadFactor * log(1 + 20 * normalizedTime), 0.5);

  vec3 spreadDirection = generateSpreadDirection(position, ttl);

  vec3 spreadForce = spreadDirection * spreadStrength;

  float distFromOrigin = length(position);
  if (distFromOrigin > smoke.maxSpreadDistance)
  {
    spreadForce -= normalize(position) * 0.05 * (distFromOrigin - smoke.maxSpreadDistance);
  }

  return spreadForce;
}

float rand(float seed)
{
  return fract(sin(seed * 91.3458) * 47453.5453);
}

float randRange(float seed, float minVal, float maxVal)
{
  return minVal + (maxVal - minVal) * rand(seed);
}

vec3 regenerateInitialPosition(float seed)
{
  float r = sqrt(rand(seed)) * 0.25;
  float theta = rand(seed + 1.0) * TWO_PI;

  float x = r * cos(theta);
  float z = r * sin(theta);

  float scaleX = randRange(seed + 2.0, -4.0, 4.0);
  float scaleZ = randRange(seed + 3.0, -4.0, 4.0);

  return vec3(x * scaleX, 0.0, z * scaleZ) + smoke.systemPosition;
}

vec3 regenerateInitialVelocity(float seed)
{
  float vx = randRange(seed + 4.0, -0.25, 0.25);
  float vz = randRange(seed + 5.0, -0.25, 0.25);

  float vy = randRange(seed + 6.0, 0.75, 2.5);

  return vec3(vx, vy, vz);
}